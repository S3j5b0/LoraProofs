


(* key derivation functions *)
type extractkey.
type expandkey.
const emptyexpandKey : expandkey.
const emptyextractKey : extractkey.


(* diffie hellman ratchet shceme *)

type G. (*group elements *)
const g: G [data].
type exponent. (*exponent used for creating pk from secret key *)
fun exp(G,exponent): G.
equation forall x:exponent, y:exponent; exp(exp(g,x),y) = exp(exp(g,y), x).





(* key ratchet shceme, including encryption and decryption *)
type ratchKey.
fun ratchetKey(G, bitstring): ratchKey. 
fun ratchetSeed(G,bitstring):bitstring.
fun senc ( bitstring , ratchKey ) : bitstring.
reduc forall m: bitstring , k : ratchKey ; sdec(senc(m, k) , k ) = m.




(*))AppKey :key, NwkKey :key, JoinEUI :bitstring,DevEUI :bitstring, DevNonce : bitstring) = *)

(*TODO: increment counter nonce *)
event debugED().
event debugAS().

event EDreceive(bitstring).
event EDsend(bitstring).
event ASreceive(bitstring).
event ASsend(bitstring).

event gotSckED(ratchKey).
event gotSckAS(ratchKey).

 

query attacker(new message_i_up).

query attacker(new message_i_down).

event sendmsg(bitstring).
event rcvmsg(bitstring).




free c :channel.
free downlink : channel.
free uplink : channel.

free disclosurechannel : channel.


let ED(downlinkRatchet_Seed0 : bitstring, uplinkRatchet_Seed0 :bitstring, DHsharekey_0:G) = 
    (* generate key pair *)

    (* downlink keys*)
    let mkSK_0_down = ratchetKey(DHsharekey_0, downlinkRatchet_Seed0) in
    let seed_0_down = ratchetSeed(DHsharekey_0, downlinkRatchet_Seed0) in

    (* uplink keys*)
    let mkSK_0_up = ratchetKey(DHsharekey_0, uplinkRatchet_Seed0) in
    let seed_0_up = ratchetSeed(DHsharekey_0, uplinkRatchet_Seed0) in

    new message_0: bitstring;
    let c_1_uplink = senc(message_0, mkSK_0_down) in
    new store_downlink_ED : channel;
    new store_uplink_ED : channel;

    out(store_uplink_ED, (mkSK_0_up,seed_0_up));
    out(store_downlink_ED, (mkSK_0_down, seed_0_down)); (* simply doing this for being able to get the things sent out again *)


    (out(uplink, c_1_uplink) |
     (!
        in(store_downlink_ED,  (sharekey_in_down :ratchKey, seed_in_down:bitstring)) [precise];
        in(downlink, c_1_down:bitstring) [precise];
        let message_0_down = sdec(c_1_down,sharekey_in_down) in
        event EDreceive(message_0_down);
        let mkSK_i_down = ratchetKey(DHsharekey_0, seed_in_down) in
        let seed_i_down = ratchetSeed(DHsharekey_0, seed_in_down) in
        out(store_downlink_ED, (mkSK_i_down, seed_i_down));


        in(store_uplink_ED, (mkSK_in_up:ratchKey, seed_in_up:bitstring)) [precise];

        let mkSK_i_up = ratchetKey(DHsharekey_0, seed_in_up) in
        let seed_i_up = ratchetSeed(DHsharekey_0, seed_in_up) in
        new message_i_up : bitstring;
        (* leaking session key of last round *)
        out(disclosurechannel, mkSK_in_up);
        
        event EDsend(message_i_up);
        out(store_downlink_ED, (mkSK_i_up, seed_0_up));
        out(uplink, senc(message_i_up,mkSK_i_up)))).






let AS(downlinkRatchet_Seed0 : bitstring, uplinkRatchet_Seed0 :bitstring, DHsharekey_0:G) = 

 

    (* downlink keys*)

    let mkSK_0_down = ratchetKey(DHsharekey_0, downlinkRatchet_Seed0) in
    let seed_0_down = ratchetSeed(DHsharekey_0, downlinkRatchet_Seed0) in
    (* uplink keys *)
    let mkSK_0_up = ratchetKey(DHsharekey_0, uplinkRatchet_Seed0) in
    let seed_0_up = ratchetSeed(DHsharekey_0, uplinkRatchet_Seed0) in
    new message_0 : bitstring;
    let c_1 = senc(message_0, mkSK_0_down) in

    new store_downlink_AS : channel;
    new store_uplink_AS : channel;

    out(store_downlink_AS, (mkSK_0_down, seed_0_down)); (* simply doing this for being able to get the things sent out again *)
    out(store_uplink_AS, (mkSK_0_up, seed_0_up));


    (out(downlink, c_1) |
     ( !
        in(store_downlink_AS,( mkSK_i_storedown: ratchKey, seed_storedown :bitstring)) [precise];

        (* ratchet *)
        let mkSK_i_down = ratchetKey(DHsharekey_0, seed_storedown) in
        
        let seed_i_SCKdown = ratchetSeed(DHsharekey_0, seed_storedown) in
        new message_i_down : bitstring;
        event ASsend(message_i_down);
        (* disclose session key of last round *)

        (*send next message and send to own channel  *)
        out(downlink, senc(message_i_down, mkSK_i_down));
        out(store_downlink_AS, (mkSK_i_down, seed_i_SCKdown));
        
        in(uplink, C_i_up:bitstring);
        in(store_uplink_AS, (mkSK_i_storeup: ratchKey, seed_storeup:bitstring));
        let message_i_up = sdec(C_i_up,mkSK_i_storeup) in
        event ASreceive(message_i_up);

        let mkSK_i_up = ratchetKey(DHsharekey_0, seed_storeup) in
        let seed_i_up = ratchetSeed(DHsharekey_0, seed_storeup) in
        out(disclosurechannel, mkSK_i_storedown);

        out(store_downlink_AS, (mkSK_i_up,seed_i_up))
        )).



process
        (* generate key pair *)
    new privEK_AS :exponent;
    let pubEK_AS = exp(g,privEK_AS) in
    
    (* generate key pair ED *)
    new privEK_ED :exponent;
    let pubEK_ED = exp(g,privEK_ED) in



    new downlinkRatchet_SeedAS : bitstring;
    new downlinkRatchet_SeedED : bitstring;
    new uplinkRatchet_SeedAS : bitstring;
    new uplinkRatchet_SeedED : bitstring;

    new devEUI :bitstring;
    new appEUI :bitstring;

    let DHsharekey_ED = exp(pubEK_AS,privEK_ED ) in
    let DHsharekey_AS = exp(pubEK_ED,privEK_AS ) in  

    ((ED(downlinkRatchet_SeedED, uplinkRatchet_SeedED, DHsharekey_ED )) | (AS(downlinkRatchet_SeedAS, uplinkRatchet_SeedAS,DHsharekey_AS )))