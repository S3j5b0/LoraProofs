set verboseClauses = short.
set verboseRules = true.

free c :channel.

free m:bitstring [private].

type pubEK.
type privEK. 
type shareKey.
fun X25519(pubEK, privEK): shareKey.
fun make(bitstring): bitstring.


fun pkEK(privEK): pubEK.


equation forall sk1 : privEK, sk2 : privEK;  X25519(pkEK(sk1), sk2) = X25519(pkEK(sk2), sk1).

event EDcreatekey(shareKey).
event AScreatekey(shareKey).
event test().

const one: bitstring.
const two: bitstring.


query k : shareKey;
      event (EDcreatekey(k)) ==> event (AScreatekey(k)).

let ED() = 
  new EDprivkey : privEK;
  let EDpubkey = pkEK(EDprivkey) in
  out(c, (one, EDpubkey));
  in(c, (=two, ASpkey : pubEK));
  let k = X25519(ASpkey, EDprivkey ) in 
  event EDcreatekey(k);
  
  0.

let AS() =
  new ASprivkey : privEK;
  let ASpubkey = pkEK(ASprivkey) in
  in(c, (=one, EDpubk :pubEK));
  let k = X25519(EDpubk, ASprivkey) in 
  event AScreatekey(k);
  out(c,(two, ASpubkey));

  event test();


  0.




process
    ((ED()) | (AS()))
    
  
    