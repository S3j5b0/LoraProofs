
free c :channel [private].

free m:bitstring [private].

type pubEK.
type privEK. 
type shareKey.
fun X25519(pubEK, privEK): shareKey.
fun make(bitstring): bitstring.

fun f(bitstring) : bitstring.

fun xor(bitstring,bitstring): bitstring.

reduc forall a:bitstring, b:bitstring;
    xorBreak(xor(a,b), b) = a. (* for advsersary *)
reduc forall a:bitstring, b:bitstring;
    xorBreak2(xor(a,b), a) = b.  (* for advsersary *)
fun pkEK(privEK): pubEK.
fun transform(bitstring):bitstring.

equation forall sk1 : privEK, sk2 : privEK;  X25519(pkEK(sk1), sk2) = X25519(pkEK(sk2), sk1).



event EDcreatekey(bitstring).
event AScreatekey(bitstring).
event test().

query event (test()).
query k : bitstring;
      event (EDcreatekey(k)) ==> event (AScreatekey(k)).





process
  new rootA : bitstring;
  new rootB : bitstring;
  let rootxor = xor(rootA,rootB) in
  let rootxor1 = xor(rootA,rootB) in

  let transform_1_A = transform(rootA) in
  let transform_2_A = transform(rootB) in 
  let xor1 = xor(transform_1_A, transform_2_A) in

  let transform_1_B = transform(rootA) in
  let transform_2_B = transform(rootB) in 
  let xor2 = xor(transform_1_B, rootA) in
  event test();
  event AScreatekey(xor1);
  event EDcreatekey(xor2);
  out(c,xor2)
    
  
    


